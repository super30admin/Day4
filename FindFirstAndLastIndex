//This is same solution we discussed in class. 
//Time Complexity : O(log n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

class Solution {
    public int[] searchRange(int[] nums, int target) {
        if(nums == null || nums.length == 0) return new int[] {-1, -1};
        int n = nums.length -1 ;
        int first = binarySearchFirst(nums,target,0,n);
        if(first ==-1) return new int[] {-1, -1};
        int last = binarySearchLast(nums,target,first,n);
        return new int[] {first, last};
    }

    private int binarySearchFirst(int[] nums, int target, int low, int high) {
        while(low<=high) {
            int mid = low + (high - low) /2;
            if(nums[mid] == target) {
                if(mid == 0 || nums[mid - 1] < nums[mid]) {
                    return mid;
                } else {
                    high = mid -1;
                }
            } else if(nums[mid] > target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return -1;
    }

    private int binarySearchLast(int[] nums, int target, int low, int high) {
        while(low<=high) {
                int mid = low + (high - low) /2;
                if(nums[mid] == target) {
                    if(mid == high || nums[mid + 1] > nums[mid]) {
                        return mid;
                    } else {
                        low = mid + 1;
                    }
                } else if(nums[mid] > target) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            }
            return -1;
    }
    



}
