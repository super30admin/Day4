//Time Complexity: O(log n)
//Space Complexity: O(1)
//Approach: Similar to finding minimum element in an array.
class Solution {
    public int findPeakElement(int[] nums) {
        int low=0;
        int high=nums.length-1;
        int peak=Integer.MIN_VALUE;
        if(nums.length==1) return 0;
        while(low<=high){
            int mid=low+(high-low)/2;
            if((mid==high || nums[mid]>nums[mid+1]) && (mid==0 || nums[mid]>nums[mid-1])){
                return mid;
            }
            else if(mid!=0 && nums[mid]<nums[mid-1]){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return peak;
    }
}