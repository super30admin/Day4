// Time Complexity :O(log n)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :No


// Your code here along with comments explaining your approach 

// Shift the bondaries towards the side where the element is greater than mid element. As the adjacent numbers are not equal, traversing towards will greater element gives us one of the peaks.
class Solution(object):
    def findPeakElement(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        low = 0
        high = len(nums)-1
        if(len(nums) ==1 or len(nums)==0):
            return 0
         
        while(low<=high):
            mid = low+(high-low)/2
            if((mid== 0 or nums[mid]>nums[mid-1]) and(mid == high or nums[mid]>nums[mid+1])):
                return mid
            
            if(nums[mid+1]>nums[mid]):
                low = mid+1
            else:
                high = mid-1
                
        
