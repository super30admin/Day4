Binary-Search-2

Problem 1: (https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/)


Time Complexity: O(log(M*N))
Space complexity: O(1)


class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        if nums == None or len(nums) == 0:
            return [-1,-1]

        first= self.binarySearchFirst(nums,target)
        if first == -1:
            return [-1,-1]

        second= self.binarySearchSecond(nums,target)

        return [first,second]

    def binarySearchFirst(self, nums:List[int], target: int) -> int:
        low = 0
        high = len(nums)-1

        while low <= high:
            mid = low + (high - low)//2

            if nums[mid] == target:

                if (mid == 0) or (nums[mid-1] != nums[mid]):
                    return mid
                else:
                    high = mid -1
            
            elif target > nums[mid] :
                low = mid + 1

            else:
                high = mid-1
        
        return -1


    def binarySearchSecond(self, nums:List[int], target: int) -> int:
        low = 0
        high = len(nums)-1

        while low <= high:
            mid = low +(high - low)//2

            if nums[mid] == target:

                if (mid == len(nums)-1) or (nums[mid+1] != target):
                    return mid 
                else:
                    low = mid + 1

            elif target > nums[mid]:
                low = mid +1

            else:
                high = mid -1

        return -1




Problem 2: (https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/)

Time Complexity: O(logN)
Space complexity: O(1)


class Solution:
    def findMin(self, nums: List[int]) -> int:
        if nums == None or len(nums) ==0:
            return -1
        
        low =0
        high= len(nums)-1
        while low <= high:
            if nums[low]<=nums[high]:
                return nums[low]

            mid = low + (high-low)//2

            if ((mid ==0) or (nums[mid]<nums[mid-1])) and ((mid == len(nums)-1) or (nums[mid]<nums[mid+1])):
                return nums[mid]
            
            if nums[low]<=nums[mid]:
                low = mid +1
            else:
                high = mid-1

        return -1




Problem 3: (https://leetcode.com/problems/find-peak-element/)


Time Complexity: O(logN)
Space complexity: O(1)


class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        if nums == None or len(nums) == 0:
            return -1
        if len(nums) ==1:
            return 0
        low = 0
        high = len(nums)-1
        while low <=high:
            mid =low + (high - low)//2
            if (mid ==0 or nums[mid]>nums[mid-1]) and (mid ==len(nums)-1 or nums[mid]>nums[mid+1]):
                return mid
            elif nums[mid]< nums[mid+1]:
                low =mid+1
            else:
                high = mid
        return -1
