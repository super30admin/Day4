class Solution {
    public int[] searchRange(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return new int[]{-1,-1};
        }

        int leftIdx = findLeftIndex(nums, 0, nums.length - 1, target);
        if (leftIdx == -1) {
            return new int[]{-1,-1};
        }
        int rightIdx = findRightIndex(nums, 0, nums.length - 1, target);
        return new int[]{leftIdx, rightIdx};
    }

    private int findLeftIndex(int[] nums, int low, int high, int target) {
        while (low <= high) {
            int mid = low + (high - low)/2;

            if (nums[mid] == target) {
                if (mid == 0 || nums[mid-1] < nums[mid]) {
                    return mid;
                } else {
                    high = mid - 1;
                }
            } else if (nums[mid] > target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return -1;
    }

        private int findRightIndex(int[] nums, int low, int high, int target) {
        while (low <= high) {
            int mid = low + (high - low)/2;

            if (nums[mid] == target) {
                if (mid == nums.length - 1 || nums[mid+1] > nums[mid]) {
                    return mid;
                } else {
                    low = mid + 1;
                }
            } else if (nums[mid] > target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return -1;
    }
}