// Time Complexity : O(logn)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : 


// Your code here along with comments explaining your approach
<<<<<<< HEAD

/**
 * @param {number[]} nums
 * @return {number}
 */
var findMin = function(nums) {
  var left = 0;
  var right = nums.length - 1;
  var mid = 0;
  while (left < right) {
    mid = Math.floor((left + right) / 2);
    if (nums[mid - 1] > nums[mid]) return nums[mid];
    if (nums[mid] < nums[left] || nums[mid] < nums[right]) {
      right = mid - 1;
    } else {
      left = mid + 1;
    }
  }
  return nums[left];
};
=======
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
class Solution:
    def findMin(self, nums: List[int]) -> int:
        l,r = 0, len(nums)-1
        while l<r:
            mid = (l+r)//2
            
            if nums[mid] > nums[r]:
                l = mid+1
            elif nums[mid] < nums[r]:
                r=mid
            else:
                return nums[r]
        return nums[l]
>>>>>>> 24c208a88697d35944a7f23b28b6369a7edbb1ee
