
// Time Complexity :O(log n )
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach
class Solution(object):
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if(len(nums)==0):
            return None
        if(len(nums)==1):
            return nums[0]
        low = 0
        high = len(nums)-1
        while(low<high):
            mid = low+(high-low)/2
	    //previous should always be less than the next element except for the min element. it this is not satisfied return it is minimum. (Base Condition)
            if(mid > 0 and nums[mid]<nums[mid-1]):
                return nums[mid]
//condition to shift the boundary to get closer to the minimum element
            elif(nums[mid]>=nums[low] and nums[mid]>nums[high]):
                low= mid+1
            else:
                high = mid-1
        return nums[low]       
        
