// Time Complexity : O(2log n) precisely 
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : I tried reducing it to O(log n) by having both the conditions for start and end 
//in the same Binary Search but I got time limit exceeded issue. I'll have to provide a check while calculating lower and upper boundaries 
//but that complicated the solution.


// Your code here along with comments explaining your approach in three sentences only
//I applied BS to find the first occurance of the target
//Then I applied binary search twice to find the lower bound and upper bounds.

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int s = 0;
        int e = nums.size() - 1;
        int first = -1;
        while(s<=e){
            int mid = s+(e-s)/2;
            if(nums[mid] == target){
                first = mid;
                e = mid - 1;
            }
            else if(nums[mid] > target){
                e = mid - 1;
            }
            else{
                s = mid + 1;
            }
            
        }
        s = 0;
        e = nums.size() - 1;
        int last = -1;
        while(s<=e){
            int mid = s+(e-s)/2;
            if(nums[mid] == target){
                last = mid;
                s = mid + 1;
            }
            else if(nums[mid] > target){
                e = mid - 1;
            }
            else{
                s = mid + 1;
            }
            
            
        }
        return {first, last};

    }
};