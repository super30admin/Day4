//Time Complexity: O(logn)


class Solution {

    private int leftSearch(int[] nums,int target,int low, int high)
    {
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            if(nums[mid]==target)
            {
                if(mid==0 || nums[mid]!=nums[mid-1])
                    return mid;
                else
                    high=mid-1;
            }
            else if(target>nums[mid])
                low=mid+1;
            else
                high=mid-1;
            
        }
        return -1;
    }
    private int rightSearch(int[] nums,int target,int low, int high)
    {
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            if(nums[mid]==target)
            {
                if(mid==nums.length-1 || nums[mid]!=nums[mid+1])
                    return mid;
                else
                    low=mid+1;
            }
            else if(target>nums[mid])
                low=mid+1;
            else
                high=mid-1;
            
        }
        return -1;
    }
    public int[] searchRange(int[] nums, int target) {
        if(nums.length==0)
            return new int[]{-1,-1};
        int left =leftSearch(nums,target, 0,nums.length-1);
        int right;
        if(left==-1)
            return new int[]{-1,-1};
        else
            right=rightSearch(nums,target,0,nums.length-1);
        return new int[]{left,right};
    }
}