class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        if nums == None or len(nums) == 0:
            return [-1,-1]
        n = len(nums)
        if nums[n-1] < target:
            return [-1,-1]
        first = self.binarySearchFirst(nums, target)
        if first == -1:
            return [-1,-1]
        last = self.binarySearchSecond(nums, target)
        return [first,last]    
    
    def binarySearchFirst(self, nums: List[int], target: int) -> int:
        low = 0
        high = len(nums)-1
        while low<=high:
            mid = low + (high-low)//2
            if nums[mid] == target:
                if (mid == 0) or nums[mid] != nums[mid - 1]:
                    return mid
                else:
                    high = mid - 1
            elif nums[mid] < target:
                low = mid+1
            else:
                high = mid -1
        return -1

    def binarySearchSecond(self, nums: List[int], target: int) -> int:
        low = 0
        high = len(nums)-1
        while low<=high:
            mid = low + (high-low)//2
            if nums[mid] == target:
                if (mid == len(nums)-1) or nums[mid] != nums[mid + 1]:
                    return mid
                else:
                    low = mid + 1
            elif nums[mid] < target:
                low = mid+1
            else:
                high = mid -1
        return -1

time = O(logn)
space = O(n)