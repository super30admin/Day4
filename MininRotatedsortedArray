//tc: O(logn)
//sc: O(1)
//passed on leetcode: yes
class Solution {
    public int findMin(int[] nums) {
        //null case
        if (nums == null || nums.length == 0) return -1;
        int low  = 0;
        int high = nums.length-1;
        while (low <= high) {
            if (nums[low] < nums[high]) return nums[low]; //if nums[low] < nums[high] -- that means the sequence is already sorted, then nums[low] can only be the min value
            int mid = low + (high - low)/2;
            if ((mid == 0 || nums[mid] < nums[mid-1]) && (mid == nums.length-1 || nums[mid] < nums[mid+1])) return nums[mid];           
            //System.out.print(nums[mid]);
            else if (nums[low] <= nums[mid]) //this is sorted side. pivot will lie on unsorted side
                low = mid+1;
            else
                high = mid-1;
        }
        return -1;
    }
}
