// using binary search to see if the previous element is lesser than mid, then there will be atleast one peak in right, else look for peak in left.

//Time complexity: O(log n)
//Space complexity: O(1)
class Solution {
    public int findPeakElement(int[] nums) {
        if(nums.length <= 1){
            return 0;
        }
        
        int n = nums.length - 1;
        if (nums[0] > nums[1]) return 0;
        if (nums[n] > nums[n-1]) return n;
        int low = 1;
        int high = nums.length - 2;
        int mid = 0;
        while (low <= high) {
            mid = (low+high) / 2;
            if (nums[mid-1] < nums[mid] && nums[mid] > nums[mid+1]) {
                return mid;
            } else if (nums[mid-1] < nums[mid]) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }    
        return -1;
    }
}
